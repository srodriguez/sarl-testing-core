package io.sarl.testing.core

import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.Address
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Capacity
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpaceSpecification
import io.sarl.lang.core.Skill
import io.sarl.lang.core.SpaceID
import io.sarl.lang.util.ConcurrentCollectionFactory
import io.sarl.lang.util.DefaultConcurrentCollectionFactory
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.sre.internal.ConfigurableAgentInjector
import io.sarl.sre.internal.Factories
import io.sarl.sre.internal.TaskAgentFailureEventEmitterFactory
import io.sarl.sre.internal.eventguard.reflect.ReflectBehaviorGuardEvaluatorRegistry
import io.sarl.sre.skills.bic.SchedulesSkill
import io.sarl.sre.skills.internal.EventBus
import io.sarl.util.ListenerNotifier
import io.sarl.util.SequenceListenerNotifier
import io.sarl.util.SmartListenerCollection
import java.util.UUID
import java.util.concurrent.locks.Lock
import java.util.concurrent.locks.ReadWriteLock
import java.util.concurrent.locks.ReentrantLock
import java.util.concurrent.locks.ReentrantReadWriteLock
import java.util.function.Supplier
import javax.inject.Provider

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

/** 
 * Agent Harness to unit test behaviors, skill and capacities.
 * 
 * This is <b>not</b> a fully executable agent, but a stub that allows for unit testing only.
 * 
 * In provides the following 'pre-installed' stubs for the built-in capacities
 * 
 * <ul>
 * <li>Logging</li>
 * </ul>
 * 
 * Other BICs must be install before the tests.
 * 
 * @author Sebastian Rodriguez
 * 
 */
 
//ConcurentCollectionFactory ReadWriteLock Lock SmartCollectionListener

class ReadWriteLockProvider implements Provider<ReadWriteLock> {
	
	def get : ReadWriteLock {
		val readWriteLock : ReadWriteLock = new ReentrantReadWriteLock()
		return readWriteLock
	}
	
}

class ConcurentCollectionFactoryProvider implements Provider<ConcurrentCollectionFactory> {
	
	def get : ConcurrentCollectionFactory {
		val concurrentCollectionFactory : ConcurrentCollectionFactory = new DefaultConcurrentCollectionFactory()
		return concurrentCollectionFactory
	}
	
}

class LockProvider implements Provider<Lock> {
	
	def get : Lock {
		val lock : Lock = new ReentrantLock()	
		return lock	
	}
	
}

class SmartListenerCollectionProvider implements Provider<SmartListenerCollection> {
	
	def get : SmartListenerCollection {
		val listenerNotifier : ListenerNotifier = new SequenceListenerNotifier()
		val smartListenerCollection : SmartListenerCollection = new SmartListenerCollection(listenerNotifier)
		return smartListenerCollection
	}
	
}

 
class FactoryProvider implements Provider<Factories> {
	
	val concurrentCollectionFactoryProvider = new ConcurentCollectionFactoryProvider
	val readWriteLockProvider = new ReadWriteLockProvider
	val lockProvider = new LockProvider
	val smartListenerCollectionProvider = new SmartListenerCollectionProvider
	var factory : Factories
	
	def get : Factories {
		factory = new Factories(
			concurrentCollectionFactoryProvider, 
			readWriteLockProvider, 
			lockProvider,
			smartListenerCollectionProvider
		)
		return factory
	}
	
}
//TODO: Have to provide the init values for the factory. As this requires providers, keep creating this providor classes until we reach a ground state
 
 
agent TestingAgent {
	
	//TODO: IOC could be interesting here so that others can create their own factories
	val factories : FactoryProvider = new FactoryProvider
	
	//@Inject
	val sup = new Supplier<InternalSchedules> {
		val agentInjector : Provider<ConfigurableAgentInjector>
		
		def get : InternalSchedules {
			new SchedulesSkill(new TestingExecutorService, 
				new TaskAgentFailureEventEmitterFactory, 
				factories,
				agentInjector)
		}

	}

	val eventBus = new EventBus(sup, new ReflectBehaviorGuardEvaluatorRegistry(this.factories), this.factories)

	val defaultAddress = new Address(new SpaceID(this.ID, UUID.randomUUID, EventSpaceSpecification), this.ID)

	//BICs for support
	
	package val schedulesStub = spy(sup.get)
	package val logging = spy(LoggingStub)
	package val behaviorStub = spy(BehaviorsStub)
	
	new() {
		super(UUID.randomUUID, UUID.randomUUID)
		setSkill(logging, Logging)
		setSkill(behaviorStub, Behaviors)
		doNothing.when(this.behaviorStub).wake(any(Event))
	}

	def getDefaultAddress : Address {
		this.defaultAddress
	}

	def withSkill(s : Skill, cap : Class<? extends Capacity>) : TestingAgent {
		setSkill(s, cap)
		this
	}

	def registerBehavior(b : Behavior) {
		registerBehavior(b,[])
	}

	def registerBehavior(b : Behavior, params: Object*) {
		this.eventBus.register(b, null, null)
		this.eventBus.immediateDispatchTo(b, new Initialize(this.ID,params), true)
	}
	def perceive(e : Event) {
		this.eventBus.immediateDispatch(e, true)
	}

}
